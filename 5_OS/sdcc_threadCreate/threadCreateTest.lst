                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.1.0 #12072 (Mac OS X ppc)
                                      4 ;--------------------------------------------------------
                                      5 	.module threadCreateTest
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl __mcs51_genXRAMCLEAR
                                     12 	.globl __mcs51_genXINIT
                                     13 	.globl __mcs51_genRAMCLEAR
                                     14 	.globl __sdcc_gsinit_startup
                                     15 	.globl _main
                                     16 	.globl _CY
                                     17 	.globl _AC
                                     18 	.globl _F0
                                     19 	.globl _RS1
                                     20 	.globl _RS0
                                     21 	.globl _OV
                                     22 	.globl _F1
                                     23 	.globl _P
                                     24 	.globl _PS
                                     25 	.globl _PT1
                                     26 	.globl _PX1
                                     27 	.globl _PT0
                                     28 	.globl _PX0
                                     29 	.globl _RD
                                     30 	.globl _WR
                                     31 	.globl _T1
                                     32 	.globl _T0
                                     33 	.globl _INT1
                                     34 	.globl _INT0
                                     35 	.globl _TXD
                                     36 	.globl _RXD
                                     37 	.globl _P3_7
                                     38 	.globl _P3_6
                                     39 	.globl _P3_5
                                     40 	.globl _P3_4
                                     41 	.globl _P3_3
                                     42 	.globl _P3_2
                                     43 	.globl _P3_1
                                     44 	.globl _P3_0
                                     45 	.globl _EA
                                     46 	.globl _ES
                                     47 	.globl _ET1
                                     48 	.globl _EX1
                                     49 	.globl _ET0
                                     50 	.globl _EX0
                                     51 	.globl _P2_7
                                     52 	.globl _P2_6
                                     53 	.globl _P2_5
                                     54 	.globl _P2_4
                                     55 	.globl _P2_3
                                     56 	.globl _P2_2
                                     57 	.globl _P2_1
                                     58 	.globl _P2_0
                                     59 	.globl _SM0
                                     60 	.globl _SM1
                                     61 	.globl _SM2
                                     62 	.globl _REN
                                     63 	.globl _TB8
                                     64 	.globl _RB8
                                     65 	.globl _TI
                                     66 	.globl _RI
                                     67 	.globl _P1_7
                                     68 	.globl _P1_6
                                     69 	.globl _P1_5
                                     70 	.globl _P1_4
                                     71 	.globl _P1_3
                                     72 	.globl _P1_2
                                     73 	.globl _P1_1
                                     74 	.globl _P1_0
                                     75 	.globl _TF1
                                     76 	.globl _TR1
                                     77 	.globl _TF0
                                     78 	.globl _TR0
                                     79 	.globl _IE1
                                     80 	.globl _IT1
                                     81 	.globl _IE0
                                     82 	.globl _IT0
                                     83 	.globl _P0_7
                                     84 	.globl _P0_6
                                     85 	.globl _P0_5
                                     86 	.globl _P0_4
                                     87 	.globl _P0_3
                                     88 	.globl _P0_2
                                     89 	.globl _P0_1
                                     90 	.globl _P0_0
                                     91 	.globl _B
                                     92 	.globl _ACC
                                     93 	.globl _PSW
                                     94 	.globl _IP
                                     95 	.globl _P3
                                     96 	.globl _IE
                                     97 	.globl _P2
                                     98 	.globl _SBUF
                                     99 	.globl _SCON
                                    100 	.globl _P1
                                    101 	.globl _TH1
                                    102 	.globl _TH0
                                    103 	.globl _TL1
                                    104 	.globl _TL0
                                    105 	.globl _TMOD
                                    106 	.globl _TCON
                                    107 	.globl _PCON
                                    108 	.globl _DPH
                                    109 	.globl _DPL
                                    110 	.globl _SP
                                    111 	.globl _P0
                                    112 	.globl _ThreadCreate
                                    113 	.globl _ThreadYield
                                    114 ;--------------------------------------------------------
                                    115 ; special function registers
                                    116 ;--------------------------------------------------------
                                    117 	.area RSEG    (ABS,DATA)
      000000                        118 	.org 0x0000
                           000080   119 _P0	=	0x0080
                           000081   120 _SP	=	0x0081
                           000082   121 _DPL	=	0x0082
                           000083   122 _DPH	=	0x0083
                           000087   123 _PCON	=	0x0087
                           000088   124 _TCON	=	0x0088
                           000089   125 _TMOD	=	0x0089
                           00008A   126 _TL0	=	0x008a
                           00008B   127 _TL1	=	0x008b
                           00008C   128 _TH0	=	0x008c
                           00008D   129 _TH1	=	0x008d
                           000090   130 _P1	=	0x0090
                           000098   131 _SCON	=	0x0098
                           000099   132 _SBUF	=	0x0099
                           0000A0   133 _P2	=	0x00a0
                           0000A8   134 _IE	=	0x00a8
                           0000B0   135 _P3	=	0x00b0
                           0000B8   136 _IP	=	0x00b8
                           0000D0   137 _PSW	=	0x00d0
                           0000E0   138 _ACC	=	0x00e0
                           0000F0   139 _B	=	0x00f0
                                    140 ;--------------------------------------------------------
                                    141 ; special function bits
                                    142 ;--------------------------------------------------------
                                    143 	.area RSEG    (ABS,DATA)
      000000                        144 	.org 0x0000
                           000080   145 _P0_0	=	0x0080
                           000081   146 _P0_1	=	0x0081
                           000082   147 _P0_2	=	0x0082
                           000083   148 _P0_3	=	0x0083
                           000084   149 _P0_4	=	0x0084
                           000085   150 _P0_5	=	0x0085
                           000086   151 _P0_6	=	0x0086
                           000087   152 _P0_7	=	0x0087
                           000088   153 _IT0	=	0x0088
                           000089   154 _IE0	=	0x0089
                           00008A   155 _IT1	=	0x008a
                           00008B   156 _IE1	=	0x008b
                           00008C   157 _TR0	=	0x008c
                           00008D   158 _TF0	=	0x008d
                           00008E   159 _TR1	=	0x008e
                           00008F   160 _TF1	=	0x008f
                           000090   161 _P1_0	=	0x0090
                           000091   162 _P1_1	=	0x0091
                           000092   163 _P1_2	=	0x0092
                           000093   164 _P1_3	=	0x0093
                           000094   165 _P1_4	=	0x0094
                           000095   166 _P1_5	=	0x0095
                           000096   167 _P1_6	=	0x0096
                           000097   168 _P1_7	=	0x0097
                           000098   169 _RI	=	0x0098
                           000099   170 _TI	=	0x0099
                           00009A   171 _RB8	=	0x009a
                           00009B   172 _TB8	=	0x009b
                           00009C   173 _REN	=	0x009c
                           00009D   174 _SM2	=	0x009d
                           00009E   175 _SM1	=	0x009e
                           00009F   176 _SM0	=	0x009f
                           0000A0   177 _P2_0	=	0x00a0
                           0000A1   178 _P2_1	=	0x00a1
                           0000A2   179 _P2_2	=	0x00a2
                           0000A3   180 _P2_3	=	0x00a3
                           0000A4   181 _P2_4	=	0x00a4
                           0000A5   182 _P2_5	=	0x00a5
                           0000A6   183 _P2_6	=	0x00a6
                           0000A7   184 _P2_7	=	0x00a7
                           0000A8   185 _EX0	=	0x00a8
                           0000A9   186 _ET0	=	0x00a9
                           0000AA   187 _EX1	=	0x00aa
                           0000AB   188 _ET1	=	0x00ab
                           0000AC   189 _ES	=	0x00ac
                           0000AF   190 _EA	=	0x00af
                           0000B0   191 _P3_0	=	0x00b0
                           0000B1   192 _P3_1	=	0x00b1
                           0000B2   193 _P3_2	=	0x00b2
                           0000B3   194 _P3_3	=	0x00b3
                           0000B4   195 _P3_4	=	0x00b4
                           0000B5   196 _P3_5	=	0x00b5
                           0000B6   197 _P3_6	=	0x00b6
                           0000B7   198 _P3_7	=	0x00b7
                           0000B0   199 _RXD	=	0x00b0
                           0000B1   200 _TXD	=	0x00b1
                           0000B2   201 _INT0	=	0x00b2
                           0000B3   202 _INT1	=	0x00b3
                           0000B4   203 _T0	=	0x00b4
                           0000B5   204 _T1	=	0x00b5
                           0000B6   205 _WR	=	0x00b6
                           0000B7   206 _RD	=	0x00b7
                           0000B8   207 _PX0	=	0x00b8
                           0000B9   208 _PT0	=	0x00b9
                           0000BA   209 _PX1	=	0x00ba
                           0000BB   210 _PT1	=	0x00bb
                           0000BC   211 _PS	=	0x00bc
                           0000D0   212 _P	=	0x00d0
                           0000D1   213 _F1	=	0x00d1
                           0000D2   214 _OV	=	0x00d2
                           0000D3   215 _RS0	=	0x00d3
                           0000D4   216 _RS1	=	0x00d4
                           0000D5   217 _F0	=	0x00d5
                           0000D6   218 _AC	=	0x00d6
                           0000D7   219 _CY	=	0x00d7
                                    220 ;--------------------------------------------------------
                                    221 ; overlayable register banks
                                    222 ;--------------------------------------------------------
                                    223 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        224 	.ds 8
                                    225 ;--------------------------------------------------------
                                    226 ; internal ram data
                                    227 ;--------------------------------------------------------
                                    228 	.area DSEG    (DATA)
                           000032   229 _SPArray	=	0x0032
                           000036   230 _currThr	=	0x0036
                           000037   231 _threadBitMask	=	0x0037
                           000038   232 _tempBitMask	=	0x0038
                           000039   233 _tempSP	=	0x0039
                           00003A   234 _startingSP	=	0x003a
                           00003B   235 _tempPSW	=	0x003b
                                    236 ;--------------------------------------------------------
                                    237 ; overlayable items in internal ram 
                                    238 ;--------------------------------------------------------
                                    239 	.area	OSEG    (OVR,DATA)
                                    240 ;--------------------------------------------------------
                                    241 ; Stack segment in internal ram 
                                    242 ;--------------------------------------------------------
                                    243 	.area	SSEG
      000000                        244 __start__stack:
      000000                        245 	.ds	1
                                    246 
                                    247 ;--------------------------------------------------------
                                    248 ; indirectly addressable internal ram data
                                    249 ;--------------------------------------------------------
                                    250 	.area ISEG    (DATA)
                                    251 ;--------------------------------------------------------
                                    252 ; absolute internal ram data
                                    253 ;--------------------------------------------------------
                                    254 	.area IABS    (ABS,DATA)
      000021                        255 	.org 0x0021
      000021                        256 _pushZero:
      000021                        257 	.ds 1
                                    258 	.area IABS    (ABS,DATA)
                                    259 ;--------------------------------------------------------
                                    260 ; bit data
                                    261 ;--------------------------------------------------------
                                    262 	.area BSEG    (BIT)
                                    263 ;--------------------------------------------------------
                                    264 ; paged external ram data
                                    265 ;--------------------------------------------------------
                                    266 	.area PSEG    (PAG,XDATA)
                                    267 ;--------------------------------------------------------
                                    268 ; external ram data
                                    269 ;--------------------------------------------------------
                                    270 	.area XSEG    (XDATA)
                                    271 ;--------------------------------------------------------
                                    272 ; absolute external ram data
                                    273 ;--------------------------------------------------------
                                    274 	.area XABS    (ABS,XDATA)
                                    275 ;--------------------------------------------------------
                                    276 ; external initialized ram data
                                    277 ;--------------------------------------------------------
                                    278 	.area XISEG   (XDATA)
                                    279 	.area HOME    (CODE)
                                    280 	.area GSINIT0 (CODE)
                                    281 	.area GSINIT1 (CODE)
                                    282 	.area GSINIT2 (CODE)
                                    283 	.area GSINIT3 (CODE)
                                    284 	.area GSINIT4 (CODE)
                                    285 	.area GSINIT5 (CODE)
                                    286 	.area GSINIT  (CODE)
                                    287 	.area GSFINAL (CODE)
                                    288 	.area CSEG    (CODE)
                                    289 ;--------------------------------------------------------
                                    290 ; interrupt vector 
                                    291 ;--------------------------------------------------------
                                    292 	.area HOME    (CODE)
      000000                        293 __interrupt_vect:
      000000 02r00rDA         [24]  294 	ljmp	__sdcc_gsinit_startup
                                    295 ;--------------------------------------------------------
                                    296 ; global & static initialisations
                                    297 ;--------------------------------------------------------
                                    298 	.area HOME    (CODE)
                                    299 	.area GSINIT  (CODE)
                                    300 	.area GSFINAL (CODE)
                                    301 	.area GSINIT  (CODE)
                                    302 	.globl __sdcc_gsinit_startup
                                    303 	.globl __sdcc_program_startup
                                    304 	.globl __start__stack
                                    305 	.globl __mcs51_genXINIT
                                    306 	.globl __mcs51_genXRAMCLEAR
                                    307 	.globl __mcs51_genRAMCLEAR
                                    308 ;	threadCreateTest.c:9: __data __at (0x21) unsigned static char pushZero = 0x0;    //Direct address to push 0 to registers in ThreadCreate                     //Thread ID 
      000000 75*21 00         [24]  309 	mov	_pushZero,#0x00
                                    310 	.area GSFINAL (CODE)
      000000 02r00r03         [24]  311 	ljmp	__sdcc_program_startup
                                    312 ;--------------------------------------------------------
                                    313 ; Home
                                    314 ;--------------------------------------------------------
                                    315 	.area HOME    (CODE)
                                    316 	.area HOME    (CODE)
      000003                        317 __sdcc_program_startup:
      000003 02r00rD0         [24]  318 	ljmp	_main
                                    319 ;	return from main will return to caller
                                    320 ;--------------------------------------------------------
                                    321 ; code
                                    322 ;--------------------------------------------------------
                                    323 	.area CSEG    (CODE)
                                    324 ;------------------------------------------------------------
                                    325 ;Allocation info for local variables in function 'ThreadCreate'
                                    326 ;------------------------------------------------------------
                                    327 ;threadId                  Allocated to registers r7 
                                    328 ;------------------------------------------------------------
                                    329 ;	threadCreateTest.c:40: ThreadID ThreadCreate(void){
                                    330 ;	-----------------------------------------
                                    331 ;	 function ThreadCreate
                                    332 ;	-----------------------------------------
      000000                        333 _ThreadCreate:
                           000007   334 	ar7 = 0x07
                           000006   335 	ar6 = 0x06
                           000005   336 	ar5 = 0x05
                           000004   337 	ar4 = 0x04
                           000003   338 	ar3 = 0x03
                           000002   339 	ar2 = 0x02
                           000001   340 	ar1 = 0x01
                           000000   341 	ar0 = 0x00
                                    342 ;	threadCreateTest.c:42: if(threadBitMask == 0b1111){
      000000 74 0F            [12]  343 	mov	a,#0x0f
      000002 B5 37 04         [24]  344 	cjne	a,_threadBitMask,00102$
                                    345 ;	threadCreateTest.c:43: return -1;
      000005 75 82 FF         [24]  346 	mov	dpl,#0xff
      000008 22               [24]  347 	ret
      000009                        348 00102$:
                                    349 ;	threadCreateTest.c:47: threadBitMask |= ((threadBitMask+1)&(~threadBitMask));
      000009 AF 37            [24]  350 	mov	r7,_threadBitMask
      00000B 0F               [12]  351 	inc	r7
      00000C E5 37            [12]  352 	mov	a,_threadBitMask
      00000E F4               [12]  353 	cpl	a
      00000F FE               [12]  354 	mov	r6,a
      000010 5F               [12]  355 	anl	a,r7
      000011 42 37            [12]  356 	orl	_threadBitMask,a
                                    357 ;	threadCreateTest.c:51: tempBitMask = threadBitMask;
      000013 85 37 38         [24]  358 	mov	_tempBitMask,_threadBitMask
                                    359 ;	threadCreateTest.c:52: while(tempBitMask>>=1){
      000016 7F 00            [12]  360 	mov	r7,#0x00
      000018                        361 00103$:
      000018 E5 38            [12]  362 	mov	a,_tempBitMask
      00001A C3               [12]  363 	clr	c
      00001B 13               [12]  364 	rrc	a
      00001C FE               [12]  365 	mov	r6,a
      00001D 8E 38            [24]  366 	mov	_tempBitMask,r6
      00001F 60 03            [24]  367 	jz	00105$
                                    368 ;	threadCreateTest.c:53: threadId++;
      000021 0F               [12]  369 	inc	r7
      000022 80 F4            [24]  370 	sjmp	00103$
      000024                        371 00105$:
                                    372 ;	threadCreateTest.c:57: startingSP = (threadId^(1UL<<2))<<4;
      000024 74 04            [12]  373 	mov	a,#0x04
      000026 6F               [12]  374 	xrl	a,r7
      000027 C4               [12]  375 	swap	a
      000028 54 F0            [12]  376 	anl	a,#0xf0
      00002A F5 3A            [12]  377 	mov	_startingSP,a
                                    378 ;	threadCreateTest.c:60: tempSP = SP; 
      00002C 85 81 39         [24]  379 	mov	_tempSP,_SP
                                    380 ;	threadCreateTest.c:61: SP = startingSP;
      00002F 85 3A 81         [24]  381 	mov	_SP,_startingSP
                                    382 ;	threadCreateTest.c:64: tempPSW = threadId<<3;
      000032 8F 06            [24]  383 	mov	ar6,r7
      000034 EE               [12]  384 	mov	a,r6
      000035 C4               [12]  385 	swap	a
      000036 03               [12]  386 	rr	a
      000037 54 F8            [12]  387 	anl	a,#0xf8
      000039 F5 3B            [12]  388 	mov	_tempPSW,a
                                    389 ;	threadCreateTest.c:67: SPArray[threadId] = SP;
      00003B EF               [12]  390 	mov	a,r7
      00003C 24 32            [12]  391 	add	a,#_SPArray
      00003E F8               [12]  392 	mov	r0,a
      00003F A6 81            [24]  393 	mov	@r0,_SP
                                    394 ;	threadCreateTest.c:70: SP = tempSP;
      000041 85 39 81         [24]  395 	mov	_SP,_tempSP
                                    396 ;	threadCreateTest.c:73: return threadId;
      000044 8F 82            [24]  397 	mov	dpl,r7
                                    398 ;	threadCreateTest.c:74: }
      000046 22               [24]  399 	ret
                                    400 ;------------------------------------------------------------
                                    401 ;Allocation info for local variables in function 'ThreadYield'
                                    402 ;------------------------------------------------------------
                                    403 ;	threadCreateTest.c:77: void ThreadYield(void) {
                                    404 ;	-----------------------------------------
                                    405 ;	 function ThreadYield
                                    406 ;	-----------------------------------------
      000047                        407 _ThreadYield:
                                    408 ;	threadCreateTest.c:78: SAVESTATE;
      000047 C0 E0            [24]  409 	PUSH ACC 
      000049 C0 F0            [24]  410 	PUSH B 
      00004B C0 82            [24]  411 	PUSH DPL 
      00004D C0 83            [24]  412 	PUSH DPH 
      00004F C0 D0            [24]  413 	PUSH PSW 
      000051 E5 36            [12]  414 	mov	a,_currThr
      000053 24 32            [12]  415 	add	a,#_SPArray
      000055 F8               [12]  416 	mov	r0,a
      000056 A6 81            [24]  417 	mov	@r0,_SP
                                    418 ;	threadCreateTest.c:80: do{
      000058                        419 00103$:
                                    420 ;	threadCreateTest.c:81: if((0b0001<<(((currThr+1)%MAXTHREADS))) & threadBitMask){
      000058 AE 36            [24]  421 	mov	r6,_currThr
      00005A 7F 00            [12]  422 	mov	r7,#0x00
      00005C 8E 82            [24]  423 	mov	dpl,r6
      00005E 8F 83            [24]  424 	mov	dph,r7
      000060 A3               [24]  425 	inc	dptr
      000061 75*00 04         [24]  426 	mov	__modsint_PARM_2,#0x04
                                    427 ;	1-genFromRTrack replaced	mov	(__modsint_PARM_2 + 1),#0x00
      000064 8F*01            [24]  428 	mov	(__modsint_PARM_2 + 1),r7
      000066 12r00r00         [24]  429 	lcall	__modsint
      000069 AE 82            [24]  430 	mov	r6,dpl
      00006B 8E F0            [24]  431 	mov	b,r6
      00006D 05 F0            [12]  432 	inc	b
      00006F 7E 01            [12]  433 	mov	r6,#0x01
      000071 7F 00            [12]  434 	mov	r7,#0x00
      000073 80 06            [24]  435 	sjmp	00117$
      000075                        436 00116$:
      000075 EE               [12]  437 	mov	a,r6
      000076 2E               [12]  438 	add	a,r6
      000077 FE               [12]  439 	mov	r6,a
      000078 EF               [12]  440 	mov	a,r7
      000079 33               [12]  441 	rlc	a
      00007A FF               [12]  442 	mov	r7,a
      00007B                        443 00117$:
      00007B D5 F0 F7         [24]  444 	djnz	b,00116$
      00007E AC 37            [24]  445 	mov	r4,_threadBitMask
      000080 7D 00            [12]  446 	mov	r5,#0x00
      000082 EC               [12]  447 	mov	a,r4
      000083 52 06            [12]  448 	anl	ar6,a
      000085 ED               [12]  449 	mov	a,r5
      000086 52 07            [12]  450 	anl	ar7,a
      000088 EE               [12]  451 	mov	a,r6
      000089 4F               [12]  452 	orl	a,r7
      00008A 60 19            [24]  453 	jz	00102$
                                    454 ;	threadCreateTest.c:82: currThr = (currThr+1)%MAXTHREADS;
      00008C AE 36            [24]  455 	mov	r6,_currThr
      00008E 7F 00            [12]  456 	mov	r7,#0x00
      000090 8E 82            [24]  457 	mov	dpl,r6
      000092 8F 83            [24]  458 	mov	dph,r7
      000094 A3               [24]  459 	inc	dptr
      000095 75*00 04         [24]  460 	mov	__modsint_PARM_2,#0x04
                                    461 ;	1-genFromRTrack replaced	mov	(__modsint_PARM_2 + 1),#0x00
      000098 8F*01            [24]  462 	mov	(__modsint_PARM_2 + 1),r7
      00009A 12r00r00         [24]  463 	lcall	__modsint
      00009D AE 82            [24]  464 	mov	r6,dpl
      00009F AF 83            [24]  465 	mov	r7,dph
      0000A1 8E 36            [24]  466 	mov	_currThr,r6
                                    467 ;	threadCreateTest.c:83: break;
      0000A3 80 19            [24]  468 	sjmp	00105$
      0000A5                        469 00102$:
                                    470 ;	threadCreateTest.c:85: currThr = (currThr+1)%MAXTHREADS;
      0000A5 AE 36            [24]  471 	mov	r6,_currThr
      0000A7 7F 00            [12]  472 	mov	r7,#0x00
      0000A9 8E 82            [24]  473 	mov	dpl,r6
      0000AB 8F 83            [24]  474 	mov	dph,r7
      0000AD A3               [24]  475 	inc	dptr
      0000AE 75*00 04         [24]  476 	mov	__modsint_PARM_2,#0x04
                                    477 ;	1-genFromRTrack replaced	mov	(__modsint_PARM_2 + 1),#0x00
      0000B1 8F*01            [24]  478 	mov	(__modsint_PARM_2 + 1),r7
      0000B3 12r00r00         [24]  479 	lcall	__modsint
      0000B6 AE 82            [24]  480 	mov	r6,dpl
      0000B8 AF 83            [24]  481 	mov	r7,dph
      0000BA 8E 36            [24]  482 	mov	_currThr,r6
                                    483 ;	threadCreateTest.c:86: }while(1);
      0000BC 80 9A            [24]  484 	sjmp	00103$
      0000BE                        485 00105$:
                                    486 ;	threadCreateTest.c:87: RESTORESTATE;
      0000BE E5 36            [12]  487 	mov	a,_currThr
      0000C0 24 32            [12]  488 	add	a,#_SPArray
      0000C2 F9               [12]  489 	mov	r1,a
      0000C3 87 81            [24]  490 	mov	_SP,@r1
      0000C5 D0 D0            [24]  491 	POP PSW 
      0000C7 D0 83            [24]  492 	POP DPH 
      0000C9 D0 82            [24]  493 	POP DPL 
      0000CB D0 F0            [24]  494 	POP B 
      0000CD D0 E0            [24]  495 	POP ACC 
                                    496 ;	threadCreateTest.c:88: }
      0000CF 22               [24]  497 	ret
                                    498 ;------------------------------------------------------------
                                    499 ;Allocation info for local variables in function 'main'
                                    500 ;------------------------------------------------------------
                                    501 ;	threadCreateTest.c:90: void main(void) {
                                    502 ;	-----------------------------------------
                                    503 ;	 function main
                                    504 ;	-----------------------------------------
      0000D0                        505 _main:
                                    506 ;	threadCreateTest.c:91: threadBitMask = 0b0001;
      0000D0 75 37 01         [24]  507 	mov	_threadBitMask,#0x01
                                    508 ;	threadCreateTest.c:92: currThr = ThreadCreate();
      0000D3 12r00r00         [24]  509 	lcall	_ThreadCreate
      0000D6 85 82 36         [24]  510 	mov	_currThr,dpl
                                    511 ;	threadCreateTest.c:93: }
      0000D9 22               [24]  512 	ret
                                    513 ;------------------------------------------------------------
                                    514 ;Allocation info for local variables in function '_sdcc_gsinit_startup'
                                    515 ;------------------------------------------------------------
                                    516 ;	threadCreateTest.c:96: void _sdcc_gsinit_startup(void) {
                                    517 ;	-----------------------------------------
                                    518 ;	 function _sdcc_gsinit_startup
                                    519 ;	-----------------------------------------
      0000DA                        520 __sdcc_gsinit_startup:
                                    521 ;	threadCreateTest.c:97: main();
                                    522 ;	threadCreateTest.c:98: }
      0000DA 02r00rD0         [24]  523 	ljmp	_main
                                    524 ;------------------------------------------------------------
                                    525 ;Allocation info for local variables in function '_mcs51_genRAMCLEAR'
                                    526 ;------------------------------------------------------------
                                    527 ;	threadCreateTest.c:99: void _mcs51_genRAMCLEAR(void) { }
                                    528 ;	-----------------------------------------
                                    529 ;	 function _mcs51_genRAMCLEAR
                                    530 ;	-----------------------------------------
      0000DD                        531 __mcs51_genRAMCLEAR:
      0000DD 22               [24]  532 	ret
                                    533 ;------------------------------------------------------------
                                    534 ;Allocation info for local variables in function '_mcs51_genXINIT'
                                    535 ;------------------------------------------------------------
                                    536 ;	threadCreateTest.c:100: void _mcs51_genXINIT(void) { }
                                    537 ;	-----------------------------------------
                                    538 ;	 function _mcs51_genXINIT
                                    539 ;	-----------------------------------------
      0000DE                        540 __mcs51_genXINIT:
      0000DE 22               [24]  541 	ret
                                    542 ;------------------------------------------------------------
                                    543 ;Allocation info for local variables in function '_mcs51_genXRAMCLEAR'
                                    544 ;------------------------------------------------------------
                                    545 ;	threadCreateTest.c:101: void _mcs51_genXRAMCLEAR(void) { }
                                    546 ;	-----------------------------------------
                                    547 ;	 function _mcs51_genXRAMCLEAR
                                    548 ;	-----------------------------------------
      0000DF                        549 __mcs51_genXRAMCLEAR:
      0000DF 22               [24]  550 	ret
                                    551 	.area CSEG    (CODE)
                                    552 	.area CONST   (CODE)
                                    553 	.area XINIT   (CODE)
                                    554 	.area CABS    (ABS,CODE)
